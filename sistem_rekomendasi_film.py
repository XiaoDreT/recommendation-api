# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Film.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pGlqrdyGj5-ls7-j1g8LgN74LDX7RqPX

# **Sistem Rekomendasi**

Sistem rekomendasi untuk merekomendasikan berbagai film dengan teknik Content-Based Filtering dan Collaborative Filtering

# **Content-Based Filtering**

## **Loading Data**

"""#### Konversi dataset menjadi sebuah DataFrame"""

# Membuat DataFrame dari dataset
import pandas as pd
import numpy as np
df = pd.read_csv('tmdb_5000_credits.csv')
df.head()

df1 = pd.read_csv('tmdb_5000_movies.csv')
df1.merge(df, left_on='id', right_on='movie_id')
df1.head()

"""## **Data Understanding**

#### Mengecek fitur 'overview' pada dataset gabungan (df1)
"""

df1['overview'].head(5)

"""## **Data Preparation**

#### TF-IDF Vectorizer
"""

from sklearn.feature_extraction.text import TfidfVectorizer
import pickle

# Inisialisasi TfidfVectorizer dan menghapus semua "english stop words" seperti 'the', 'a', dsb
tf = TfidfVectorizer(stop_words='english')

# Menggantikan data NaN dengan String kosong
df1['overview'] = df1['overview'].fillna('')

# Membuat matriks TF-IDF yang diperlukan dengan mengubah data
tf_matrix = tf.fit_transform(df1['overview'])

# Menampilkan ukuran matriks tf-idf
tf_matrix.shape

# Menyimpan matriks tf-idf dalam file pickle
pickle.dump(tf_matrix, open("tfidf_matrix.pkl", "wb"))

"""#### Membuat reverse map dari index dan judul film"""

# Membangun reverse map
indeks = pd.Series(df1.index, index=df1['title']).drop_duplicates()

"""## **Modeling**

#### Cosine Similarity
"""

from sklearn.metrics.pairwise import cosine_similarity

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tf_matrix, tf_matrix)
cosine_sim

"""#### Membuat sebuah function untuk mendapatkan rekomendasi"""

# Fungsi yang menerima judul film sebagai input dan output film yang paling mirip
def film_recommendations(title, cosine_sim=cosine_sim):
    # Mendapatkan indeks film yang sesuai dengan judul
    idx = df1.index[df1['title'] == title].tolist()
    
    if not idx:
        raise ValueError(f"Movie title '{title}' not found in the dataset.")
    
    idx = idx[0]

    # Mendapatkan skor kemiripan (similarity) dari semua film dengan film yang dipasangkan
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sortir film berdasarkan skor kemiripan
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Mendapatkan skor dari 10 film yang mirip
    sim_scores = sim_scores[1:11]
    

    # Mendapatkan indeks film
    indeks_film = [i[0] for i in sim_scores]

    # Mengembalikan top 10 film yang paling mirip
    return df1['title'].iloc[indeks_film]

"""#### Mendapatkan rekomendasi"""

# Mendapatkan rekomendasi film yang mirip dengan Spider-Man 3
film_recommendations('Spider-Man 3')

# Mendapatkan rekomendasi film yang mirip dengan Titanic
film_recommendations('Titanic')

# Mendapatkan rekomendasi film yang mirip dengan The Dark Knight Rises
film_recommendations('The Dark Knight Rises')